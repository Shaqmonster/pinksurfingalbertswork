// Copyright (C) LoginID

/**
 * Represents any asynchronous function.
 * @param {...any} args - The arguments for the function.
 * @returns {Promise<any>} A promise that resolves to any value.
 */
export type AnyAsyncFunction = (...args: any[]) => Promise<any>;

/**
 * A generic callback function that takes a parameter of type `T` and returns a promise resolving to type `U`.
 *
 * Commonly used for handling the result of asynchronous operations in a typed manner.
 *
 * @template T - The input type of the callback parameter.
 * @template U - The output type the callback resolves to.
 * @param {T} param - The input parameter for the callback.
 * @returns {Promise<U>} A promise that resolves with the result of type `U`.
 */
export type ResultCallback<T, U> = (param: T) => Promise<U>;

/**
 * Options used to initiate the checkout-specific MFA authentication flow.
 *
 * @expand
 */
export interface CheckoutBeginFlowOptions {
  /**
   * A transaction payload generated by the merchant to represent the purchase or operation
   * being confirmed.
   */
  txPayload: string;

  /**
   * An identifier generated on the merchant side to identify the current checkout session.
   * This identifier is used as a key to retrieve associated trust information.
   *
   * It is passed to the wallet to link the session with wallet-issued identity data,
   * enabling secure transaction confirmation without revealing end-user identity to the merchant.
   */
  checkoutId?: string;

  /**
   * The username of the user initiating the checkout session.
   * If not provided, the wallet may retrieve it from an embedded context.
   */
  username?: string;
}

/**
 * Options used when performing a user action during the checkout-specific MFA authentication flow.
 * This is typically used after `beginFlow` has initiated the process, and the user is completing an authentication step.
 *
 * @expand
 */
export interface CheckoutPerformActionOptions {
  /**
   * The payload required for completing the authentication factor.
   * This typically contains user input or challenge-response data.
   */
  payload?: string;

  /**
   * An updated transaction payload generated by the merchant to represent the purchase or operation
   * being confirmed. This updates the initial `txPayload` used in the `beginFlow` method.
   */
  txPayload?: string;

  /**
   * Enables passkey support in browser autofill suggestions (conditional UI), if supported.
   */
  autoFill?: boolean;

  /**
   * A human-palatable name for the user account, intended only for display on your passkeys.
   */
  displayName?: string;
}
